pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
globals = {}
--------------sub-module-C:\Users\autod\OneDrive\Dokumente\pico8\carts\snoodle\canon.lua---------------------
m42f75baf20d2ed1098fe910e9182122a = function()
    local Canon = {}
local _initRotation = 0.5
local _tankCoords = {
    x = 60,
    y = 116
}

function Canon:new(obj)
    obj = obj or {}
    obj.rotation = _initRotation
    obj.currentMonster = nil
    setmetatable(obj, self)
    self.__index = self
    return obj
end

function Canon:draw()
    -- draw canon circles
    print(self.rotation, 64, 64, 13)

    for i = 2, 4 do
        local s = 18 -- sprite  nr
        local m = 0 -- margin for last circle
        if (i == 4) then
            s = 19 -- last canon sprite
            m = 0.5
        end
        spr(s, (5 + m) * i * (sin(self.rotation)) + _tankCoords.x, (5 + m) * i * cos(self.rotation) + _tankCoords.y)
    end

    print(self.currentMonster, _tankCoords.x, _tankCoords.y, 14);
end

function Canon:update()
    --convert mouse x coord to rotation
    if (stat(32) > 17 and stat(32) < 79) then
        self.rotation = 1 / 128 * stat(32)
    end

    --update monster position
    if (self.currentMonster) then
        self.currentMonster:setCoords(nil, _tankCoords.x, _tankCoords.y) -- align monster to  the midle of the canon tank
    end

    if (btn(0, 0) and self.rotation > 0.27) then self.rotation = self.rotation - 0.005 end
    if (btn(1, 0) and self.rotation < 0.73) then self.rotation = self.rotation + 0.005 end
end

function Canon:mountMonster(this, monster)
    self.currentMonster = monster
end

function Canon:fire()
    if (self.currentMonster) then
        self.currentMonster:setTrajectory(nil, self.rotation)
        self.currentMonster = nil
    end
end

return Canon

end
m42f75baf20d2ed1098fe910e9182122a = m42f75baf20d2ed1098fe910e9182122a()
--------------sub-module-C:\Users\autod\OneDrive\Dokumente\pico8\carts\snoodle\monster.lua---------------------
mebfe0a8595bbbc9dd2c88f55e7316bd7 = function()
    local Monster = {}
local _speed = 0.3 --higher is faster
function Monster:new(obj)
    obj = obj or {}
    obj.sprite = 1 + flr(rnd(7)) * 2
    obj.x = 0
    obj.y = 0
    obj.distance = 0
    obj.direction = nil
    setmetatable(obj, self)
    self.__index = self
    return obj
end

function Monster:draw()
    spr(self.sprite, self.x, self.y)

--    if (self.direction) then
--        print(self.x .. ' ' .. self.y .. " " .. self.direction, self.x - 3, self.y - 6, 10)
--    end
end

function Monster:update()
    if (self.direction) then
        self.x = self.x + sin(self.direction) * self.distance
        self.y = self.y + cos(self.direction) * self.distance
        self.distance = self.distance + _speed
    end

    if (distance == 100) then
        remove(globals.monsters, self)
    end
end

function Monster:setCoords(this, x, y)
    --    print("set coords"..x.." "..y,x,y,12)
    --    flip()
    self.x = x
    self.y = y
end

function Monster:setTrajectory(this, direction)
    self.direction = direction
end

return Monster

end
mebfe0a8595bbbc9dd2c88f55e7316bd7 = mebfe0a8595bbbc9dd2c88f55e7316bd7()
--------------sub-module-C:\Users\autod\OneDrive\Dokumente\pico8\carts\snoodle\lift.lua---------------------
mb0de3a3ccbdbdd0e0742cda2d8b4752d = function()
    local Lift = {}
local _initPosition = 122 -- vertical lift positon
local _xCoord = 120 -- horizontal lift position
local Monster = mebfe0a8595bbbc9dd2c88f55e7316bd7
local firstMonster = Monster:new()
add(globals.monsters, firstMonster)

function Lift:new(obj,monsters)

    local firstMonster = Monster:new()
    add(monsters, firstMonster)

    obj = obj or {}
    obj.position = _initPosition
    obj.stage = 0
    obj.currentMonster = firstMonster
    obj.robot = nil
    setmetatable(obj, self)
    self.__index = self
    return obj
end

function Lift:draw()
    spr(21, _xCoord, self.position)
    print(self.currentMonster, _xCoord - 14, 90, 3)
end

function Lift:update()
    self:animate()
    if self.currentMonster then
        self.currentMonster:setCoords(nil, _xCoord - 1, self.position - 8)
    end
end

function Lift:addMonster()
    if (self.robot.stage == 0) then
           self.stage = 1
    end
end

function Lift:registerRobot(this, robot)
    self.robot = robot
end

function Lift:animate()

    if self.stage == 1 then   --descend
        self.robot:grabMonster(nil, self.currentMonster)
        self.currentMonster  = nil

        if globals.i % 5 then
            self.position = self.position + 1
        end

        if self.position > 136 then -- below surface

            local currentMonster = Monster:new() --assign new monster
            add(globals.monsters, currentMonster)
            self.currentMonster = currentMonster

            self.stage = 2
        end
    end

    if self.stage == 2 then -- lift




        if globals.i % 5 then
            self.position = self.position - 1
        end

        if self.position <= _initPosition then
            self.stage = 0
        end
    end
end

return Lift
end
mb0de3a3ccbdbdd0e0742cda2d8b4752d = mb0de3a3ccbdbdd0e0742cda2d8b4752d()
--------------sub-module-C:\Users\autod\OneDrive\Dokumente\pico8\carts\snoodle\robot.lua---------------------
meaad72aeae06ceb1154d27f2099820e1 = function()
    local Robot = {}
local _initPos = 110 -- init  x coord
local _initDirection = 0 -- init arm position
local _yCoord = 115 -- robots permament vertical coord
local _animSpeed = 1 -- higher is slower
function Robot:new(obj)
    obj = obj or {}
    obj.sprite = 20
    obj.x = _initPos
    obj.y = _yCoord
    obj.direction = _initDirection
    obj.stage = 0
    obj.currentMonster = nil
    obj.canon = nil
    setmetatable(obj, self)
    self.__index = self
    return obj
end

--revolve object around robot
function Robot:revolve(this, distance)
    return {
        x = distance * cos(self.direction) + self.x;
        y = distance * sin(self.direction) + self.y;
    }
end

function Robot:registerCanon(this, canon)
    self.canon = canon
end

function Robot:draw()
    local armsDistance = self:revolve(nil, 4)
    local monsterDistance = self:revolve(nil, 5)

    if self.currentMonster then
        self.currentMonster:setCoords(nil, monsterDistance.x - 2, monsterDistance.y)
    end

    spr(self.sprite, self.x, self.y) --body

    line(self.x + 3, self.y + 4, armsDistance.x + 3, armsDistance.y + 4, 11) --arm
    circ(armsDistance.x+3 , armsDistance.y+4, 1, 8) -- upper claw

    print(self.currentMonster, self.x-5, self.y-6, 4)

    if self.stage == 1 then
        if globals.i % _animSpeed == 0 then
            if self.direction < 0.5 then
                self.direction = self.direction + 0.05 -- run to canon
            else
                self.stage = 2
            end
        end
    end

    if self.stage == 2 then
        if globals.i % _animSpeed == 0 then
            if self.x > 65 then
                self.x = self.x - 2
            else
                self.direction = _initDirection --rotate back to lift
                self.canon:mountMonster(nil,self.currentMonster)
                self.currentMonster = nil

                self.stage = 3
            end
        end
    end

    if self.stage == 3 then

        if globals.i % _animSpeed == 0 then
            if self.x < _initPos then
                self.x = self.x + 3
            else
                self.stage = 0
            end
        end
    end


end


function Robot:grabMonster(this, monster)
    if self.stage == 0 then
        self.currentMonster = monster
        self.stage = 1
    end
end

function Robot:update()
end

return Robot;
end
meaad72aeae06ceb1154d27f2099820e1 = meaad72aeae06ceb1154d27f2099820e1()

--------------root-module---------------------
--snoodle
--by kepikoi
Canon = m42f75baf20d2ed1098fe910e9182122a
Lift = mb0de3a3ccbdbdd0e0742cda2d8b4752d
Robot = meaad72aeae06ceb1154d27f2099820e1

function _init()
    --    poke(0x5f2d, 1) --mouse support

    globals.i = 0
    globals.monsters = {}

    canon = Canon:new();
    lift = Lift:new({},globals.monsters);
    robot = Robot:new();

    lift:registerRobot(nil, robot);
    robot:registerCanon(nil, canon);

    -- init first monster
    lift:addMonster();
end

function _update60()
    -- iterate i counter
    globals.i = globals.i + 1

    listenControls();

    for m in all(globals.monsters) do
        m:update()
    end

    canon:update()
    lift:update()
    robot:update()
end

function _draw()
    cls()

    -- draw bg map
    map(0, 0, 0, 0, 128, 128, 0)

    print(#globals.monsters, 0, 0, 8)

    canon:draw()
    lift:draw()

    for m in all(globals.monsters) do
        m:draw()
    end

    robot:draw()
end

function listenControls()
    if (btn(4, 0)) then
        canon:fire()
        lift:addMonster()
    end
end
__gfx__
000000003bbbbbb33bbbbbb30888888008888880001111000011110070707007700707070001200000012000009aaa00009aaa00095555900955559000000000
00000000b33bb33bb33bb33b0288882002288220011111100111111007cccc7007cccc7060122206601d2d0605aaaaa005aaaaa05cc55cc55c1551c500000000
00700700b77bb77bb72bb27b8228822882c88c2811d71d71117717717cc2c2c07cc2c2c7562d2d655627276509555550095555505c155c155cc55cc500000000
00077000b72b327bbbbb3bbb88c88c8888c88c8811771771117d1d710cc6c6c70cc6c6c001d72720012222209a55a55a9a55a55a055757500557575000000000
000770003bb33bb3bbb33bbb888998888889988811115111111151117cdcccc00cccccc702222220022222209aaaaaaa9aaaaaaa00dd7d0000dd7d0000000000
007007003222222332222223281616222816162211188111111111110ccddc077ccddc001222222212161612098888a009aaaaa00dddddd00dddddd000000000
00000000322882233b2222b30855550008111100018008100188881007ccc07007ccc0702221112222111112098778a0098888a00d2222dd0dd22ddd00000000
0000000003b88b3003bbbb30028888200255552000188100001111007070700770070707221222222222222200988a00009aaa000dd22dd00d2222d000000000
05666600056666000000000000000000007770007666665500000000000000000000000000000000000000000000000000000000000000000000000000000000
06666660066666600056500000499f0007ccc7000f22d11000000000000000000000000000000000000000000000000000000000000000000000000000000000
0669696006696960056f65000499aaf07ccccc700f22d11000000000000000000000000000000000000000000000000000000000000000000000000000000000
066666600666666006f7f6000499aaa000efe0000f22d11000000000000000000000000000000000000000000000000000000000000000000000000000000000
0666566006665660056f650004999a900defed000f22d11000000000000000000000000000000000000000000000000000000000000000000000000000000000
056666500566665000565000024999400defed000f22d11000000000000000000000000000000000000000000000000000000000000000000000000000000000
006556000065560000000000002494000d000d000f22d11000000000000000000000000000000000000000000000000000000000000000000000000000000000
00066000000660000000000000000000ddb0ddb00f22d11000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000885555550000006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000055555588000066cccc660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555885550006cc0000cc6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000085555558006c00000000c600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005588555506c0000000000c60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005555588506c0000000000c60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000588555556c000000000000c6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555588586c000000000000c6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10100100000000006c000000000000c6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10100100000000006c000000000000c6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
100101200000000006c0000000000c60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
020100107777777776c0000000000c67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001066666666676c00000000c676000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00020010555558855556cc0000cc6885000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0010001058855555588566cccc665555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
20100010555588585555886666558858000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
3a3a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000022230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3131313131313132333131313131310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
